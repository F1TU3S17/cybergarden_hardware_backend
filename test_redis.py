"""–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Redis."""

from app.db.redis_client import redis_client

def test_redis_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis."""
    print("Testing Redis connection...")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if redis_client.ping():
        print("‚úÖ Redis connection successful!")
    else:
        print("‚ùå Redis connection failed!")
        return
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    test_device_id = "test-device-123"
    test_values = {
        "temperature_limit": 25.5,
        "humidity_limit": 60.0,
        "fire_limit": 100.0,
        "servo_position": 90
    }
    
    print(f"\nüìù Saving test values for device {test_device_id}...")
    success = redis_client.set_device_values(test_device_id, test_values)
    
    if success:
        print("‚úÖ Values saved successfully!")
    else:
        print("‚ùå Failed to save values!")
        return
    
    # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\nüìñ Reading values for device {test_device_id}...")
    retrieved_values = redis_client.get_device_values(test_device_id)
    
    if retrieved_values:
        print("‚úÖ Values retrieved successfully!")
        print(f"   Retrieved: {retrieved_values}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if retrieved_values == test_values:
            print("‚úÖ Values match!")
        else:
            print("‚ùå Values don't match!")
    else:
        print("‚ùå Failed to retrieve values!")
        return
    
    # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è
    print(f"\nüîÑ Updating temperature_limit to 30.0...")
    success = redis_client.update_device_value(test_device_id, "temperature_limit", 30.0)
    
    if success:
        print("‚úÖ Field updated successfully!")
        updated_values = redis_client.get_device_values(test_device_id)
        print(f"   New temperature_limit: {updated_values.get('temperature_limit')}")
    else:
        print("‚ùå Failed to update field!")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    print(f"\nüìã Getting all devices with values...")
    all_devices = redis_client.get_all_devices_with_values()
    print(f"‚úÖ Found {len(all_devices)} device(s) with values")
    for device_id, values in all_devices.items():
        print(f"   - {device_id}: {values}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüóëÔ∏è  Cleaning up test data...")
    success = redis_client.delete_device_values(test_device_id)
    
    if success:
        print("‚úÖ Test data cleaned up!")
    else:
        print("‚ùå Failed to clean up test data!")
    
    print("\n‚ú® All tests completed!")

if __name__ == "__main__":
    test_redis_connection()
